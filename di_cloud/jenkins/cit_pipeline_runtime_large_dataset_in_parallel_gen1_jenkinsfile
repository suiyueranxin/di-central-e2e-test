@Library('cet-shared-library') _

pipeline {
  agent {
    kubernetes {
      yamlFile 'di_cloud/jenkins/yaml/cet_pod.yaml'
    }
  }
  stages {

    stage('Inject credentials'){
        steps{
            script{
                injectCredentials{
                  stage('Start pipeline graph') {
                      dir("di_cloud"){
                          container('central-e2e-testing') {
                            catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                              sh "poetry install"
                              sh '''
                                echo "Start pipeline graph"
                                poetry run python3 utils/run_case.py --start-dir cit_scenarios/pipelines --output ./testresult/startPipeline/ --file test_cit_pipeline_runtime_large_dataset_in_parallel.py --priority ${priority} --key-test-name test_gen1_start --test-info-json utils/test_info.json
                              '''
                            }
                          }
                      }
                  }

                  stage('Validation for the result') {
                      dir("di_cloud"){
                        container('central-e2e-testing'){
                            catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                              sh '''
                              echo "Validation started"
                              retries=$((retries+1))
                              while [ $retries -gt 0 ]
                              do
                                retries=$((retries-1))
                                sleep ${duration}m
                                {
                                  poetry run python3 utils/run_case.py --start-dir cit_scenarios/pipelines/ --output ./testresult/${retries} --file test_cit_pipeline_runtime_large_dataset_in_parallel.py --priority ${priority} --key-test-name test_gen1_validate --test-info-json utils/test_info.json
                                  status=$?
                                } || echo "There are failed test cases"
                                echo "$retries" > retries.txt
                                if [ $status -eq 0 ]
                                then
                                break
                                fi
                              done
                              if [ $status -ne 0 ]
                              then
                              exit 1
                              fi
                              '''
                            }
                        }
                      }
                  }
                }
            }
        }
    }
    
    

    stage('Copy report to testresult folder') {
      steps {
        dir("di_cloud"){
          container('central-e2e-testing'){
            sh '''
            echo "Generate HTML Report"
            if [ -f retries.txt ]
            then
              retrytimes=`cat retries.txt`
            fi
            RESULTPATH=testresult/${retrytimes}
            if [ -d "$RESULTPATH" ]
            then
            echo "result file path is:"
            echo ${RESULTPATH}
            cp -r $RESULTPATH/* testresult/
            fi
            '''
          }
        }
      }
    }

    stage('convert result report') {
      when {
        expression {params.send2Xray}
      }
      steps {
        dir("di_cloud"){
          container('central-e2e-testing'){ 
            sh "poetry run python3 utils/convert_result.py --src testresult/ --target xrayresults/ --jira-json utils/test_info.json"
          }
        }
      }
    }

    stage('Import results to Xray') {
      when {
        allOf {
          expression {params.send2Xray}
          expression {fileExists('di_cloud/xrayresults/')}
        }
      }
      steps {
        step(
          script {
              echo params.xrayExecutionKey
              if (params.xrayExecutionKey!='' && params.xrayExecutionKey!=null) {
                echo 'use existing test execution ' + params.xrayExecutionKey + ' of test plan ' + params.xrayTestPlanKey
                [
                  $class: 'XrayImportBuilder', 
                  endpointName: '/junit', 
                  importFilePath: 'di_cloud/xrayresults/*.xml', 
                  importInParallel: 'false',
                  importToSameExecution: 'true', 
                  projectKey: 'DM00', 
                  serverInstance: '7281f85f-7369-4a95-ba5f-000051c74551', 
                  testPlanKey: '${xrayTestPlanKey}',
                  testExecKey: '${xrayExecutionKey}'
                ]
              } else {
                echo 'create a new test execution on test plan ' + params.xrayTestPlanKey
                [
                  $class: 'XrayImportBuilder', 
                  endpointName: '/junit/multipart', 
                  importFilePath: 'di_cloud/xrayresults/*.xml', 
                  importInParallel: 'false',
                  importToSameExecution: 'true', 
                  projectKey: 'DM00', 
                  serverInstance: '7281f85f-7369-4a95-ba5f-000051c74551', 
                  inputInfoSwitcher: 'fileContent',
                  importInfo: '''{
                    "fields": {
                      "project": {
                        "key": "DM00"
                      },
                      "summary": "TE DI:${diVersion} - Validation testing of CIT Scenarios",
                      "issuetype": {
                        "id": "11904"
                      },
                      "components": [
                        {
                          "name":"Common Data Services (Cluster)"
                        }
                      ],
                      "customfield_22469": [
                        "${xrayTestPlanKey}"
                      ],
                      "assignee": {
                        "name": "${assignee}"
                      }
                    }
                  }'''
                ]
              }
          }
        )
      }
    }
  }
  post {
    always {
      script{
        junit "di_cloud/testresult/*.xml"
      }
      sendNotifications(currentBuild.currentResult, "Test result is $currentBuild.currentResult")
    } 
  }

  parameters {
    string(name: 'priority', defaultValue: 'P3', description: 'Validation priority strings splited by ";"')
    string(name: 'cluster', defaultValue: 'CET_DI', description: 'Pre-defined cluster to run CET scenarios')
    string(name: 'url', defaultValue: '', description: 'URL of Cluster to run CET scenarios, use its value instead of pre-defined cluster config')
    string(name: 'tenant', defaultValue: 'central-e2e-test', description: 'Tenant of Cluster to run CET scenarios, use its value instead of pre-defined tenant')
    string(name: 'duration', defaultValue: '150', description: 'duration time(mins) for each retry')
    string(name: 'retries', defaultValue: '0', description: 'max number for retry')
    string(name: 'recipients', defaultValue: 'amy.li01@sap.com', description: '')
    booleanParam(name:'send2Xray', defaultValue:false, description:'Send the test results to Jira Xray.')
    string(name: 'xrayTestPlanKey', defaultValue: 'DM00-10484', description:'Only works when send2Xray is checked.')
    string(name: 'xrayExecutionKey', defaultValue: 'DM00-10485', description: 'Only works when send2Xray is checked. Leave the option empty to create a new test execution for the test plan')
    string(name: 'assignee', defaultValue: 'I052186', description: 'Test execution task owner')
    string(name: 'diVersion', defaultValue: '2023.08.1', description: 'Used in summary of test exucution in JIRA')
  }
}



